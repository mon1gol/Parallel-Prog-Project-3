<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotMP</name>
    </assembly>
    <members>
        <member name="T:DotMP.Atomic">
            <summary>
            Provides atomic operations for integral types as a wrapper around the Interlocked class.
            Adds support for signed and unsigned 32- and 64-bit integers.
            Supports addition, subtraction (for signed types), increment, decrement, bitwise And, and bitwise Or.
            </summary>
        </member>
        <member name="M:DotMP.Atomic.Add(System.Int32@,System.Int32)">
            <summary>
            Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be replaced.</param>
            <param name="value">The value to add to the destination integer.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Sub(System.Int32@,System.Int32)">
            <summary>
            Subtracts two 32-bit integers and replaces the first integer with the difference, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be replaced.</param>
            <param name="value">The value to subtract from the destination integer.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Inc(System.Int32@)">
            <summary>
            Increments a specified 32-bit integer by one and stores the result, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be incremented.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Dec(System.Int32@)">
            <summary>
            Decrements a specified 32-bit integer by one and stores the result, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be decremented.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Add(System.UInt32@,System.UInt32)">
            <summary>
            Adds two 32-bit unsigned integers and replaces the first integer with the sum, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be replaced.</param>
            <param name="value">The value to add to the destination integer.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Sub(System.UInt32@,System.UInt32)">
            <summary>
            Subtracts two 32-bit unsigned integers and replaces the first integer with the difference, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be replaced.</param>
            <param name="value">The value to subtract from the destination integer.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Inc(System.UInt32@)">
            <summary>
            Increments a specified 32-bit unsigned integer by one and stores the result, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be incremented.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Dec(System.UInt32@)">
            <summary>
            Decrements a specified 32-bit unsigned integer by one and stores the result, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be decremented.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Add(System.Int64@,System.Int64)">
            <summary>
            Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be replaced.</param>
            <param name="value">The value to add to the destination integer.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Sub(System.Int64@,System.Int64)">
            <summary>
            Subtracts two 64-bit integers and replaces the first integer with the difference, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be replaced.</param>
            <param name="value">The value to subtract from the destination integer.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Inc(System.Int64@)">
            <summary>
            Increments a specified 64-bit integer by one and stores the result, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be incremented.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Dec(System.Int64@)">
            <summary>
            Decrements a specified 64-bit integer by one and stores the result, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be decremented.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Add(System.UInt64@,System.UInt64)">
            <summary>
            Adds two 64-bit unsigned integers and replaces the first integer with the sum, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be replaced.</param>
            <param name="value">The value to add to the destination integer.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Sub(System.UInt64@,System.UInt64)">
            <summary>
            Subtracts two 64-bit unsigned integers and replaces the first integer with the difference, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be replaced.</param>
            <param name="value">The value to subtract from the destination integer.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Inc(System.UInt64@)">
            <summary>
            Increments a specified 64-bit unsigned integer by one and stores the result, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be incremented.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="M:DotMP.Atomic.Dec(System.UInt64@)">
            <summary>
            Decrements a specified 64-bit unsigned integer by one and stores the result, as an atomic operation.
            </summary>
            <param name="target">The destination integer to be decremented.</param>
            <returns>The new value stored as a result of the operation.</returns>
        </member>
        <member name="T:DotMP.ActionRef`1">
            <summary>
            Action delegate that takes an int and a ref T as parameters.
            </summary>
            <typeparam name="T">Type of the ref parameter.</typeparam>
            <param name="a">The ref parameter.</param>
            <param name="i">The int parameter.</param>
        </member>
        <member name="T:DotMP.ActionRef2`1">
            <summary>
            Action delegate that takes two ints and a ref T as parameters.
            </summary>
            <typeparam name="T">Type of the ref parameter.</typeparam>
            <param name="a">The ref parameter.</param>
            <param name="i">The first int parameter.</param>
            <param name="j">The second int parameter.</param>
        </member>
        <member name="T:DotMP.ActionRef3`1">
            <summary>
            Action delegate that takes three ints and a ref T as parameters.
            </summary>
            <typeparam name="T">Type of the ref parameter.</typeparam>
            <param name="a">The ref parameter.</param>
            <param name="i">The first int parameter.</param>
            <param name="j">The second int parameter.</param>
            <param name="k">The third int parameter.</param>
        </member>
        <member name="T:DotMP.ActionRef4`1">
            <summary>
            Action delegate that takes four ints and a ref T as parameters.
            </summary>
            <typeparam name="T">Type of the ref parameter.</typeparam>
            <param name="a">The ref parameter.</param>
            <param name="i">The first int parameter.</param>
            <param name="j">The second int parameter.</param>
            <param name="k">The third int parameter.</param>
            <param name="l">The fourth int parameter.</param>
        </member>
        <member name="T:DotMP.ActionRefN`1">
            <summary>
            Action delegate that takes an int[] and a ref T as parameters.
            </summary>
            <typeparam name="T">Type of the ref parameter.</typeparam>
            <param name="a">The ref parameter.</param>
            <param name="i">The int[] parameter.</param>
        </member>
        <member name="T:DotMP.ForAction`1">
            <summary>
            Class encapsulating all of the possible callbacks in a Parallel.For-style loop.
            This includes Parallel.For, Parallel.ForReduction&lt;T&gt;, Parallel.ForCollapse, and Parallel.ForReductionCollapse&lt;T&gt;.
            </summary>
            <typeparam name="T">The type of the reduction callback.</typeparam>
        </member>
        <member name="T:DotMP.ForAction`1.ActionSelector">
            <summary>
            Enum describing which actions can be selected.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.Regular">
            <summary>
            A regular for loop with 1 variable.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.Reduction">
            <summary>
            A reduction loop with 1 variable.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.Collapse2">
            <summary>
            A collapsed loop with 2 variables.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.Collapse3">
            <summary>
            A collapsed loop with 3 variables.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.Collapse4">
            <summary>
            A collapsed loop with 4 variables.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.CollapseN">
            <summary>
            A collapsed loop with unbounded variables.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.ReductionCollapse2">
            <summary>
            A reduction and collapsed loop with 2 variables.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.ReductionCollapse3">
            <summary>
            A reduction and collapsed loop with 3 variables.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.ReductionCollapse4">
            <summary>
            A reduction and collapsed loop with 4 variables.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ActionSelector.ReductionCollapseN">
            <summary>
            A reduction and collapsed loop with unbounded variables.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_fn">
            <summary>
            Represents an action that can be selected via ActionSelector.Regular
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_red">
            <summary>
            Represents an action that can be selected via ActionSelector.Reduction
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_col_2">
            <summary>
            Represents an action that can be selected via ActionSelector.Collapse2
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_col_3">
            <summary>
            Represents an action that can be selected via ActionSelector.Collapse3
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_col_4">
            <summary>
            Represents an action that can be selected via ActionSelector.Collapse4
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_col_n">
            <summary>
            Represents an action that can be selected via ActionSelector.CollapseN
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_red_col_2">
            <summary>
            Represents an action that can be selected via ActionSelector.ReductionCollapse2
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_red_col_3">
            <summary>
            Represents an action that can be selected via ActionSelector.ReductionCollapse3
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_red_col_4">
            <summary>
            Represents an action that can be selected via ActionSelector.ReductionCollapse4
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.omp_red_col_n">
            <summary>
            Represents an action that can be selected via ActionSelector.ReductionCollapseN
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.selector">
            <summary>
            Holds the data regarding which action to select.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.ranges_prv">
            <summary>
            Represents the ranges of collapsed loops for future unflattening.
            </summary>
        </member>
        <member name="P:DotMP.ForAction`1.ranges">
            <summary>
            Represents the ranges of collapsed loops for unflattening, ensuring that loops do not have too many iterations.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.indices">
            <summary>
            Array representing the starting indices.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.end_indices">
            <summary>
            Array representing the ending indices.
            </summary>
        </member>
        <member name="F:DotMP.ForAction`1.diffs">
            <summary>
            Array which represents the length of collapsed loops in each dimension.
            </summary>
        </member>
        <member name="P:DotMP.ForAction`1.IsCollapse">
            <summary>
            Tracks if the action represents a collapsed for loop.
            </summary>
        </member>
        <member name="P:DotMP.ForAction`1.IsReduction">
            <summary>
            Tracks if the action represents a reduction loop.
            </summary>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(System.Action{System.Int32})">
            <summary>
            Constructor for regular for loops with 1 variable.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(DotMP.ActionRef{`0})">
            <summary>
            Constructor for reduction for loops with 1 variable.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(System.Action{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Constructor for collapsed for loops with 2 variables.
            </summary>
            <param name="action">The action to run.</param>
            <param name="ranges">The ranges of the collapsed loop.</param>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(System.Action{System.Int32,System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Constructor for collapsed for loops with 3 variables.
            </summary>
            <param name="action">The action to run.</param>
            <param name="ranges">The ranges of the collapsed loop.</param>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(System.Action{System.Int32,System.Int32,System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Constructor for collapsed for loops with 4 variables.
            </summary>
            <param name="action">The action to run.</param>
            <param name="ranges">The ranges of the collapsed loop.</param>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(System.Action{System.Int32[]},System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Constructor for collapsed for loops with unbounded variables.
            </summary>
            <param name="action">The action to run.</param>
            <param name="ranges">The ranges of the collapsed loop.</param>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(DotMP.ActionRef2{`0},System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Constructor for reduction collapsed for loops with 2 variables.
            </summary>
            <param name="action">The action to run.</param>
            <param name="ranges">The ranges of the collapsed loop.</param>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(DotMP.ActionRef3{`0},System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Constructor for reduction collapsed for loops with 3 variables.
            </summary>
            <param name="action">The action to run.</param>
            <param name="ranges">The ranges of the collapsed loop.</param>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(DotMP.ActionRef4{`0},System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Constructor for reduction collapsed for loops with 4 variables.
            </summary>
            <param name="action">The action to run.</param>
            <param name="ranges">The ranges of the collapsed loop.</param>
        </member>
        <member name="M:DotMP.ForAction`1.#ctor(DotMP.ActionRefN{`0},System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Constructor for reduction collapsed for loops with unbounded variables.
            </summary>
            <param name="action">The action to run.</param>
            <param name="ranges">The ranges of the collapsed loop.</param>
        </member>
        <member name="M:DotMP.ForAction`1.ComputeIndices2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Computes the indices for collapsed loops with 2 indices.
            </summary>
            <param name="curr_iter">The current iteration to unflatten.</param>
            <param name="start1">The start of the first pair of indices.</param>
            <param name="start2">The start of the second pair of indices.</param>
            <param name="diff2">The divisor to divrem by.</param>
            <param name="i">The first computed index.</param>
            <param name="j">The second computed index.</param>
        </member>
        <member name="M:DotMP.ForAction`1.ComputeIndices3(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Computes the indices for collapsed loops with 3 indices.
            </summary>
            <param name="curr_iter">The current iteration to unflatten.</param>
            <param name="start1">The start of the first pair of indices.</param>
            <param name="start2">The start of the second pair of indices.</param>
            <param name="start3">The start of the third pair of indices.</param>
            <param name="diff2">The difference in the second pair of indices.</param>
            <param name="diff3">The difference in the third pair of indices.</param>
            <param name="i">The first computed index.</param>
            <param name="j">The second computed index.</param>
            <param name="k">The third computed index.</param>
        </member>
        <member name="M:DotMP.ForAction`1.ComputeIndicesN(System.Int32,System.Int32[])">
            <summary>
            Computes the indices for collapsed loops with 4 or more indices.
            </summary>
            <param name="curr_iter">The current iteration to unflatten.</param>
            <param name="indices">The array to store indices in.</param>
        </member>
        <member name="M:DotMP.ForAction`1.PerformLoop(System.Int32@,System.Int32,System.Int32,`0@)">
            <summary>
            Executes a chunk using the action selected by ForAction.selector
            </summary>
            <param name="curr_iter">A reference to the current iteration.</param>
            <param name="start">The start of the chunk, inclusive.</param>
            <param name="end">The end of the chunk, exclusive.</param>
            <param name="local">The local variable to reduce to.</param>
        </member>
        <member name="T:DotMP.IntWrapper">
            <summary>
            Wrapper around integers as a reference type.
            </summary>
        </member>
        <member name="F:DotMP.IntWrapper.int">
            <summary>
            Integer to keep track of.
            </summary>
        </member>
        <member name="M:DotMP.IntWrapper.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="int">Value to initialize integer to.</param>
        </member>
        <member name="T:DotMP.DAG`2">
            <summary>
            DAG for maintaining task dependencies.
            </summary>
        </member>
        <member name="F:DotMP.DAG`2.tasks_remaining">
            <summary>
            Counter for remaining tasks in queue.
            </summary>
        </member>
        <member name="F:DotMP.DAG`2.associations">
            <summary>
            Associations from T->U.
            </summary>
        </member>
        <member name="F:DotMP.DAG`2.unmet_dependencies">
            <summary>
            Counts the number of yet-unmet dependencies of a task.
            </summary>
        </member>
        <member name="F:DotMP.DAG`2.satisfies_dependency">
            <summary>
            Keeps track of what task satisfies what dependencies.
            </summary>
        </member>
        <member name="F:DotMP.DAG`2.no_dependencies">
            <summary>
            Bag of items with no dependencies.
            </summary>
        </member>
        <member name="F:DotMP.DAG`2.rw_lock">
            <summary>
            RW lock for managing tasks.
            </summary>
        </member>
        <member name="F:DotMP.DAG`2.completed">
            <summary>
            Keeps track of what items have been completed.
            </summary>
        </member>
        <member name="M:DotMP.DAG`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DotMP.DAG`2.AddItem(`0,`1,`0[])">
            <summary>
            Adds an item to the DAG.
            </summary>
            <param name="id">The ID of the item to be added.</param>
            <param name="item">The item to be added.</param>
            <param name="dependencies">A list of ID dependencies.</param>
        </member>
        <member name="M:DotMP.DAG`2.GetNextItem(`1@,`0@,System.Int32@)">
            <summary>
            Gets the next item from the DAG.
            </summary>
            <param name="item">The item returned from the DAG.</param>
            <param name="id">The ID of the item returned from the DAG.</param>
            <param name="tasks_remaining">The number of tasks remaining in the queue.</param>
            <returns>Whether or not there was an item to be returned.</returns>
        </member>
        <member name="M:DotMP.DAG`2.CompleteItem(`0)">
            <summary>
            Mark an item as completed, in order to remove as a dependency.
            </summary>
            <param name="id">The ID of the item to be marked completed.</param>
        </member>
        <member name="M:DotMP.DAG`2.Dispose">
            <summary>
            Override to implement IDisposable, disposes of the read-write lock.
            </summary>
        </member>
        <member name="M:DotMP.DAG`2.TaskIsComplete(`0)">
            <summary>
            Determines if a task has been completed.
            </summary>
            <param name="id">The ID of the task to check completion.</param>
            <returns>Whether or not the task has been completed.</returns>
        </member>
        <member name="T:DotMP.Exceptions.NotInParallelRegionException">
            <summary>
            Exception thrown if a parallel-only construct is used outside of a parallel region.
            </summary>
        </member>
        <member name="M:DotMP.Exceptions.NotInParallelRegionException.#ctor(System.String)">
            <summary>
            Constructor with a message.
            </summary>
            <param name="msg">The message to associate with the exception.</param>
        </member>
        <member name="T:DotMP.Exceptions.CannotPerformNestedParallelismException">
            <summary>
            Exception thrown if a Parallel.ParallelRegion is created inside of another Parallel.ParallelRegion.
            </summary>
        </member>
        <member name="M:DotMP.Exceptions.CannotPerformNestedParallelismException.#ctor(System.String)">
            <summary>
            Constructor with a message.
            </summary>
            <param name="msg">The message to associate with the exception.</param>
        </member>
        <member name="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">
            <summary>
            Exception thrown if a Parallel.Single is created inside of a Parallel.For or Parallel.ForReduction&lt;T&gt;.
            </summary>
        </member>
        <member name="M:DotMP.Exceptions.CannotPerformNestedWorksharingException.#ctor(System.String)">
            <summary>
            Constructor with a message.
            </summary>
            <param name="msg">The message to associate with the exception.</param>
        </member>
        <member name="T:DotMP.Exceptions.InvalidArgumentsException">
            <summary>
            Exception thrown if invalid arguments are specified to DotMP functions.
            </summary>
        </member>
        <member name="M:DotMP.Exceptions.InvalidArgumentsException.#ctor(System.String)">
            <summary>
            Constructor with a message.
            </summary>
            <param name="msg">The message to associate with the exception.</param>
        </member>
        <member name="T:DotMP.Exceptions.TooManyIterationsException">
            <summary>
            Exception thrown if a for loop has too many iterations and would cause the schedulers to fail.
            </summary>
        </member>
        <member name="M:DotMP.Exceptions.TooManyIterationsException.#ctor(System.String)">
            <summary>
            Constructor with a message.
            </summary>
            <param name="msg">The message to associate with the exception.</param>
        </member>
        <member name="T:DotMP.Exceptions.ImproperTaskwaitUsageException">
            <summary>
            Exception thrown if the wrong taskwait overload was used from within a task.
            </summary>
        </member>
        <member name="M:DotMP.Exceptions.ImproperTaskwaitUsageException.#ctor(System.String)">
            <summary>
            Constructor with a message.
            </summary>
            <param name="msg">The message to associate with the exception.</param>
        </member>
        <member name="T:DotMP.Exceptions.InternalSchedulerException">
            <summary>
            Exception thrown if the internal schedulers encounter an overflow.
            </summary>
        </member>
        <member name="M:DotMP.Exceptions.InternalSchedulerException.#ctor(System.String)">
            <summary>
            Constructor with a message.
            </summary>
            <param name="msg">The message to associate with the exception.</param>
        </member>
        <member name="T:DotMP.Region">
            <summary>
            Contains relevant internal information about parallel regions, including the threads and the function to be executed.
            Provides a region-wide lock and SpinWait objects for each thread.
            </summary>
        </member>
        <member name="F:DotMP.Region.threads">
            <summary>
            The threads to be created and executed.
            </summary>
        </member>
        <member name="F:DotMP.Region.ws_lock">
            <summary>
            Generic lock to be used within the workspace.
            </summary>
        </member>
        <member name="F:DotMP.Region.num_threads">
            <summary>
            The number of threads in play.
            </summary>
        </member>
        <member name="F:DotMP.Region.omp_fn">
            <summary>
            The function to be executed.
            </summary>
        </member>
        <member name="F:DotMP.Region.ex">
            <summary>
            Exception caught from threads.
            </summary>
        </member>
        <member name="M:DotMP.Region.CreateThread(System.Action,System.Int32,System.UInt32)">
            <summary>
            Factory for creating threads in the threadpool.
            </summary>
            <param name="omp_fn">The function to execute.</param>
            <param name="tid">The thread ID.</param>
            <param name="num_threads">The total number of threads.</param>
            <returns>The created Thread object.</returns>
        </member>
        <member name="M:DotMP.Region.#ctor(System.UInt32,System.Action)">
            <summary>
            Creates a specified number of threads available to the parallel region, and sets the function to be executed.
            Also sets other relevant data for the parallel region.
            </summary>
            <param name="num_threads">The number of threads to be created.</param>
            <param name="omp_fn">The function to be executed.</param>
        </member>
        <member name="T:DotMP.ForkedRegion">
            <summary>
            Contains the Region object and controls for creating and starting a parallel region.
            </summary>
        </member>
        <member name="F:DotMP.ForkedRegion.reg_pv">
            <summary>
            The contained Region object.
            </summary>
        </member>
        <member name="P:DotMP.ForkedRegion.reg">
            <summary>
            Getter for singleton object ForkedRegion.reg_pv.
            </summary>
        </member>
        <member name="F:DotMP.ForkedRegion.in_parallel_prv">
            <summary>
            Whether or not the program is currently in a parallel region.
            </summary>
        </member>
        <member name="P:DotMP.ForkedRegion.in_parallel">
            <summary>
            Getter and setter for singleton bool ForkedRegion.in_parallel_prv.
            </summary>
        </member>
        <member name="F:DotMP.ForkedRegion.in_workshare_prv">
            <summary>
            Whether or not the program is currently in a worksharing region (>0 meaning the program is in said region).
            </summary>
        </member>
        <member name="P:DotMP.ForkedRegion.in_workshare">
            <summary>
            Getter and setter for singleton bool ForkedRegion.in_workshare_prv.
            </summary>
        </member>
        <member name="M:DotMP.ForkedRegion.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DotMP.ForkedRegion.#ctor(System.UInt32,System.Action)">
            <summary>
            Initializes the threadpool with the specified number of threads and function to be executed, as well as setting the thread names.
            </summary>
            <param name="num_threads">The number of threads to be created.</param>
            <param name="omp_fn">The function to be executed.</param>
        </member>
        <member name="M:DotMP.ForkedRegion.StartThreadpool">
            <summary>
            Starts the threadpool and waits for all threads to complete before returning.
            </summary>
            <exception cref="T:System.Exception">Thrown if an exception is caught in the threadpool. If multiple are thrown, the first one thrown is returned.</exception>
        </member>
        <member name="T:DotMP.Lock">
            <summary>
            A lock that can be used in a parallel region.
            Also contains instance methods for locking.
            Available methods are Set, Unset, and Test.
            </summary>
        </member>
        <member name="F:DotMP.Lock._lock">
            <summary>
            The int acting as the lock.
            </summary>
        </member>
        <member name="M:DotMP.Lock.#ctor">
            <summary>
            Constructs a new lock.
            </summary>
        </member>
        <member name="M:DotMP.Lock.Set">
            <summary>
            Stalls the thread until the lock is set.
            </summary>
        </member>
        <member name="M:DotMP.Lock.Unset">
            <summary>
            Unsets the lock.
            </summary>
        </member>
        <member name="M:DotMP.Lock.Test">
            <summary>
            Attempts to set the lock.
            Does not stall the thread.
            </summary>
            <returns>True if the lock was set, false otherwise.</returns>
        </member>
        <member name="T:DotMP.Operations">
            <summary>
            Enum that represents the different operations that can be used in a for-reduction.
            The operations are Add, Subtract, Multiply, BinaryAnd, BinaryOr, BinaryXor, BooleanAnd, BooleanOr, Min, and Max.
            </summary>
        </member>
        <member name="F:DotMP.Operations.Add">
            <summary>
            Represents a reduction using the '+' operator.
            </summary>
        </member>
        <member name="F:DotMP.Operations.Subtract">
            <summary>
            Represents a reduction using the '-' operator.
            </summary>
        </member>
        <member name="F:DotMP.Operations.Multiply">
            <summary>
            Represents a reduction using the '*' operator.
            </summary>
        </member>
        <member name="F:DotMP.Operations.BinaryAnd">
            <summary>
            Represents a reduction using the '&amp;' operator;
            </summary>
        </member>
        <member name="F:DotMP.Operations.BinaryOr">
            <summary>
            Represents a reduction using the '|' operator.
            </summary>
        </member>
        <member name="F:DotMP.Operations.BinaryXor">
            <summary>
            Represents a reduction using the '^' operator.
            </summary>
        </member>
        <member name="F:DotMP.Operations.BooleanAnd">
            <summary>
            Represents a reduction using the '&amp;&amp;' operator.
            </summary>
        </member>
        <member name="F:DotMP.Operations.BooleanOr">
            <summary>
            Represents a reduction using the '||' operator.
            </summary>
        </member>
        <member name="F:DotMP.Operations.Min">
            <summary>
            Represents a reduction using the Math.Min() function.
            </summary>
        </member>
        <member name="F:DotMP.Operations.Max">
            <summary>
            Represents a reduction using the Math.Max() function.
            </summary>
        </member>
        <member name="T:DotMP.Parallel">
            <summary>
            The main class of DotMP.
            Contains all the main methods for parallelism.
            For users, this is the main class you want to worry about, along with Lock, Shared, and Atomic
            </summary>
        </member>
        <member name="F:DotMP.Parallel.critical_lock">
            <summary>
            The dictionary for critical regions.
            </summary>
        </member>
        <member name="F:DotMP.Parallel.single_thread">
            <summary>
            The dictionary for single regions.
            </summary>
        </member>
        <member name="F:DotMP.Parallel.ordered">
            <summary>
            The dictionary for ordered regions.
            </summary>
        </member>
        <member name="F:DotMP.Parallel.barrier">
            <summary>
            Barrier object for DotMP.Parallel.Barrier()
            </summary>
        </member>
        <member name="F:DotMP.Parallel.num_threads">
            <summary>
            Number of threads to be used in the next parallel region, where 0 means that it will be determined on-the-fly.
            </summary>
        </member>
        <member name="F:DotMP.Parallel.thread_num">
            <summary>
            Current thread num, cached.
            </summary>
        </member>
        <member name="F:DotMP.Parallel.task_nesting">
            <summary>
            The level of task nesting, to determine when to enact barriers and reset the DAG.
            </summary>
        </member>
        <member name="F:DotMP.Parallel.canceled">
            <summary>
            Determines if the current threadpool has been marked to terminate.
            </summary>
        </member>
        <member name="M:DotMP.Parallel.FixArgs(System.Int32,System.Int32,DotMP.IScheduler@,System.Nullable{System.UInt32}@,System.UInt32)">
            <summary>
            Fixes the arguments for a parallel for loop.
            If a Schedule is set to Static, Dynamic, or Guided, then the function simply calculates chunk size if none is given.
            If a Schedule is set to Runtime, then the function checks the OMP_SCHEDULE environment variable and sets the appropriate values.
            </summary>
            <param name="start">The start of the loop.</param>
            <param name="end">The end of the loop.</param>
            <param name="sched">The schedule of the loop.</param>
            <param name="chunk_size">The chunk size of the loop.</param>
            <param name="num_threads">The number of threads to be used in the loop.</param>
        </member>
        <member name="M:DotMP.Parallel.ValidateParams(System.Int32,System.Int32,DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Validates all parameters passed to DotMP functions.
            </summary>
            <param name="start">Start of loop.</param>
            <param name="end">End of loop.</param>
            <param name="schedule">Scheduler used.</param>
            <param name="num_threads">Number of threads.</param>
            <param name="chunk_size">Chunk size.</param>
            <param name="num_tasks">Number of tasks.</param>
            <param name="grainsize">Grainsize.</param>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a for loop inside a parallel region.
            A for loop created with For inside of a parallel region is executed in parallel, with iterations being distributed among the threads, and potentially out-of-order.
            A schedule is provided to inform the runtime how to distribute iterations of the loop to threads.
            Available schedules are specified by the Schedule enum, and have detailed documentation in the Iter class.
            Acts as an implicit Barrier().
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ForCollapse(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.Action{System.Int32,System.Int32},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a collapsed for loop inside a parallel region.
            A collapsed for loop can be used when you want to parallelize two or more nested for loops.
            Instead of only parallelizing across the outermost loop, the nested loops are flattened before scheduling,
            which has the effect of parallelizing across both loops.
            This has the effect multiplying the number of iterations the scheduler can work with,
            which can improve load balancing in irregular nested loops.
            </summary>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
            <exception cref="T:DotMP.Exceptions.TooManyIterationsException">Thrown if there are too many iterations to handle.</exception> 
        </member>
        <member name="M:DotMP.Parallel.ForCollapse(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.Action{System.Int32,System.Int32,System.Int32},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a collapsed for loop inside a parallel region.
            A collapsed for loop can be used when you want to parallelize two or more nested for loops.
            Instead of only parallelizing across the outermost loop, the nested loops are flattened before scheduling,
            which has the effect of parallelizing across both loops.
            This has the effect multiplying the number of iterations the scheduler can work with,
            which can improve load balancing in irregular nested loops.
            </summary>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="thirdRange">A tuple representing the start and end of the third for loop.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
            <exception cref="T:DotMP.Exceptions.TooManyIterationsException">Thrown if there are too many iterations to handle.</exception>
        </member>
        <member name="M:DotMP.Parallel.ForCollapse(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.Action{System.Int32,System.Int32,System.Int32,System.Int32},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a collapsed for loop inside a parallel region.
            A collapsed for loop can be used when you want to parallelize two or more nested for loops.
            Instead of only parallelizing across the outermost loop, the nested loops are flattened before scheduling,
            which has the effect of parallelizing across both loops.
            This has the effect multiplying the number of iterations the scheduler can work with,
            which can improve load balancing in irregular nested loops.
            </summary>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="thirdRange">A tuple representing the start and end of the third for loop.</param>
            <param name="fourthRange">A tuple representing the start and end of the fourth for loop.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
            <exception cref="T:DotMP.Exceptions.TooManyIterationsException">Thrown if there are too many iterations to handle.</exception>
        </member>
        <member name="M:DotMP.Parallel.ForCollapse(System.ValueTuple{System.Int32,System.Int32}[],System.Action{System.Int32[]},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a collapsed for loop inside a parallel region.
            A collapsed for loop can be used when you want to parallelize two or more nested for loops.
            Instead of only parallelizing across the outermost loop, the nested loops are flattened before scheduling,
            which has the effect of parallelizing across both loops.
            This has the effect multiplying the number of iterations the scheduler can work with,
            which can improve load balancing in irregular nested loops.
            </summary>
            <param name="ranges">A tuple representing the start and end of each of the for loops.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
            <exception cref="T:DotMP.Exceptions.TooManyIterationsException">Thrown if there are too many iterations to handle.</exception>
        </member>
        <member name="M:DotMP.Parallel.For``1(System.Int32,System.Int32,DotMP.ForAction{``0},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{DotMP.Operations})">
            <summary>
            Internal handler for For.
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="forAction">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="op">The operation to be performed in the case of reduction loops.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ForReduction``1(System.Int32,System.Int32,DotMP.Operations,``0@,DotMP.ActionRef{``0},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a for loop inside a parallel region with a reduction.
            This is similar to For(), but the reduction allows multiple threads to reduce their work down to a single variable.
            Using ForReduction&lt;T&gt; allows the runtime to perform this operation much more efficiently than a naive approach using the Locking or Atomic classes.
            Each thread gets a thread-local version of the reduction variable, and the runtime performs a global reduction at the end of the loop.
            Since the global reduction only involves as many variables as there are threads, it is much more efficient than a naive approach.
            Acts as an implicit Barrier().
            </summary>
            <typeparam name="T">The type of the reduction.</typeparam>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ForReductionCollapse``1(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},DotMP.Operations,``0@,DotMP.ActionRef2{``0},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a collapsed reduction for loop inside a parallel region.
            A collapsed for loop can be used when you want to parallelize two or more nested for loops.
            Instead of only parallelizing across the outermost loop, the nested loops are flattened before scheduling,
            which has the effect of parallelizing across both loops.
            This has the effect multiplying the number of iterations the scheduler can work with,
            which can improve load balancing in irregular nested loops.
            
            Unlike Parallel.ForCollapse, this method permits a reduction parameter.
            </summary>
            <typeparam name="T">The type of the reduction.</typeparam>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
            <exception cref="T:DotMP.Exceptions.TooManyIterationsException">Thrown if there are too many iterations to handle.</exception>
        </member>
        <member name="M:DotMP.Parallel.ForReductionCollapse``1(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},DotMP.Operations,``0@,DotMP.ActionRef3{``0},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a collapsed reduction for loop inside a parallel region.
            A collapsed for loop can be used when you want to parallelize two or more nested for loops.
            Instead of only parallelizing across the outermost loop, the nested loops are flattened before scheduling,
            which has the effect of parallelizing across both loops.
            This has the effect multiplying the number of iterations the scheduler can work with,
            which can improve load balancing in irregular nested loops.
            
            Unlike Parallel.ForCollapse, this method permits a reduction parameter.
            </summary>
            <typeparam name="T">The type of the reduction.</typeparam>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="thirdRange">A tuple representing the start and end of the third for loop.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
            <exception cref="T:DotMP.Exceptions.TooManyIterationsException">Thrown if there are too many iterations to handle.</exception>
        </member>
        <member name="M:DotMP.Parallel.ForReductionCollapse``1(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},DotMP.Operations,``0@,DotMP.ActionRef4{``0},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a collapsed reduction for loop inside a parallel region.
            A collapsed for loop can be used when you want to parallelize two or more nested for loops.
            Instead of only parallelizing across the outermost loop, the nested loops are flattened before scheduling,
            which has the effect of parallelizing across both loops.
            This has the effect multiplying the number of iterations the scheduler can work with,
            which can improve load balancing in irregular nested loops.
            
            Unlike Parallel.ForCollapse, this method permits a reduction parameter.
            </summary>
            <typeparam name="T">The type of the reduction.</typeparam>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="thirdRange">A tuple representing the start and end of the third for loop.</param>
            <param name="fourthRange">A tuple representing the start and end of the fourth for loop.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
            <exception cref="T:DotMP.Exceptions.TooManyIterationsException">Thrown if there are too many iterations to handle.</exception>
        </member>
        <member name="M:DotMP.Parallel.ForReductionCollapse``1(System.ValueTuple{System.Int32,System.Int32}[],DotMP.Operations,``0@,DotMP.ActionRefN{``0},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Creates a collapsed reduction for loop inside a parallel region.
            A collapsed for loop can be used when you want to parallelize two or more nested for loops.
            Instead of only parallelizing across the outermost loop, the nested loops are flattened before scheduling,
            which has the effect of parallelizing across both loops.
            This has the effect multiplying the number of iterations the scheduler can work with,
            which can improve load balancing in irregular nested loops.
            
            Unlike Parallel.ForCollapse, this method permits a reduction parameter.
            </summary>
            <typeparam name="T">The type of the reduction.</typeparam>
            <param name="ranges">A tuple representing the start and end of each of the for loops.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
            <exception cref="T:DotMP.Exceptions.TooManyIterationsException">Thrown if there are too many iterations to handle.</exception>
        </member>
        <member name="M:DotMP.Parallel.ForReduction``1(System.Int32,System.Int32,DotMP.Operations,``0@,DotMP.ForAction{``0},DotMP.IScheduler,System.Nullable{System.UInt32})">
            <summary>
            Internal handler for ForReduction.
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="op">The operation to be performed in the case of reduction loops.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelRegion(System.Action,System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel region.
            The body of a parallel region is executed by as many threads as specified by the num_threads parameter.
            If the num_threads parameter is absent, then the runtime checks if SetNumThreads has been called.
            If so, it will use that many threads. If not, the runtime will try to use as many threads as there are logical processors.
            </summary>
            <param name="action">The action to be performed in the parallel region.</param>
            <param name="num_threads">The number of threads to be used in the parallel region, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelFor(System.Int32,System.Int32,System.Action{System.Int32},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel for loop. Contains all of the parameters from ParallelRegion() and For().
            This is simply a convenience method for creating a parallel region and a for loop inside of it.
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelForReduction``1(System.Int32,System.Int32,DotMP.Operations,``0@,DotMP.ActionRef{``0},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel for loop with a reduction. Contains all of the parameters from ParallelRegion() and ForReduction&lt;T&gt;().
            This is simply a convenience method for creating a parallel region and a for loop with a reduction inside of it.
            </summary>
            <typeparam name="T">The type of the reduction.</typeparam>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelForCollapse(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.Action{System.Int32,System.Int32},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel collapsed for loop. Contains all of the parameters from ParallelRegion() and ForCollapse().
            This is simply a convenience method for creating a parallel region and a collapsed for loop.
            </summary>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelForCollapse(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.Action{System.Int32,System.Int32,System.Int32},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel collapsed for loop. Contains all of the parameters from ParallelRegion() and ForCollapse().
            This is simply a convenience method for creating a parallel region and a collapsed for loop.
            </summary>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="thirdRange">A tuple representing the start and end of the third for loop.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelForCollapse(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.Action{System.Int32,System.Int32,System.Int32,System.Int32},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel collapsed for loop. Contains all of the parameters from ParallelRegion() and ForCollapse().
            This is simply a convenience method for creating a parallel region and a collapsed for loop.
            </summary>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="thirdRange">A tuple representing the start and end of the third for loop.</param>
            <param name="fourthRange">A tuple representing the start and end of the fourth for loop.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelForCollapse(System.ValueTuple{System.Int32,System.Int32}[],System.Action{System.Int32[]},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel collapsed for loop. Contains all of the parameters from ParallelRegion() and ForCollapse().
            This is simply a convenience method for creating a parallel region and a collapsed for loop.
            </summary>
            <param name="ranges">A tuple representing the start and end of each of the for loops.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelForReductionCollapse``1(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},DotMP.Operations,``0@,DotMP.ActionRef2{``0},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel collapsed reduction for loop. Contains all of the parameters from ParallelRegion() and ForReductionCollapse().
            This is simply a convenience method for creating a parallel region and a collapsed for loop with a reduction inside of it.
            </summary>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelForReductionCollapse``1(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},DotMP.Operations,``0@,DotMP.ActionRef3{``0},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel collapsed reduction for loop. Contains all of the parameters from ParallelRegion() and ForReductionCollapse().
            This is simply a convenience method for creating a parallel region and a collapsed for loop with a reduction inside of it.
            </summary>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="thirdRange">A tuple representing the start and end of the third for loop.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelForReductionCollapse``1(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},DotMP.Operations,``0@,DotMP.ActionRef4{``0},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel collapsed reduction for loop. Contains all of the parameters from ParallelRegion() and ForReductionCollapse().
            This is simply a convenience method for creating a parallel region and a collapsed for loop with a reduction inside of it.
            </summary>
            <param name="firstRange">A tuple representing the start and end of the first for loop.</param>
            <param name="secondRange">A tuple representing the start and end of the second for loop.</param>
            <param name="thirdRange">A tuple representing the start and end of the third for loop.</param>
            <param name="fourthRange">A tuple representing the start and end of the fourth for loop.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelForReductionCollapse``1(System.ValueTuple{System.Int32,System.Int32}[],DotMP.Operations,``0@,DotMP.ActionRefN{``0},DotMP.IScheduler,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a parallel collapsed reduction for loop. Contains all of the parameters from ParallelRegion() and ForReductionCollapse().
            This is simply a convenience method for creating a parallel region and a collapsed for loop with a reduction inside of it.
            </summary>
            <param name="ranges">A tuple representing the start and end of each of the for loops.</param>
            <param name="op">The operation to be performed on the reduction.</param>
            <param name="reduce_to">The variable to reduce to.</param>
            <param name="action">The action to be performed in the loop.</param>
            <param name="schedule">The schedule of the loop, defaulting to static.</param>
            <param name="chunk_size">The chunk size of the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="num_threads">The number of threads to be used in the loop, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.Sections(System.Action[])">
            <summary>
            Creates a sections region.
            Sections allows for the user to submit multiple, individual tasks to be distributed among threads in parallel.
            In parallel, each thread active will dequeue a callback and execute it.
            This is useful if you have lots of individual tasks that need to be executed in parallel, and each task requires its own lambda.
            Acts as an implicit Barrier().
            </summary>
            <param name="actions">The actions to be performed in the sections region.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
        </member>
        <member name="M:DotMP.Parallel.Task(System.Action,DotMP.TaskUUID[])">
            <summary>
            Enqueue a task into the task queue.
            Differing from OpenMP, there is no concept of parent or child tasks as of yet.
            All tasks submitted are treated equally in a central task queue.
            </summary>
            <param name="action">The task to enqueue.</param>
            <param name="depends">List of dependencies for the task.</param>
            <returns>The task generated for use as a future dependency.</returns>
        </member>
        <member name="M:DotMP.Parallel.Taskwait(DotMP.TaskUUID[])">
            <summary>
            Wait for selected tasks in the queue to complete, or for the full queue to empty if no tasks are specified.
            Acts as an implicit Barrier() if it is not called from within a task.
            </summary>
            <param name="tasks">The tasks to wait on.</param>
            <exception cref="T:DotMP.Exceptions.ImproperTaskwaitUsageException">Thrown if a parameter-less taskwait is called from within a thread, which leads to deadlock.</exception> 
        </member>
        <member name="M:DotMP.Parallel.Taskloop(System.Int32,System.Int32,System.Action{System.Int32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Boolean,DotMP.TaskUUID[])">
            <summary>
            Creates a number of tasks to complete a for loop in parallel.
            If neither grainsize nor num_tasks are specified, a grainsize is calculated on-the-fly.
            If both grainsize and num_tasks are specified, the num_tasks parameter takes precedence over grainsize.
            </summary>
            <param name="start">The start of the taskloop, inclusive.</param>
            <param name="end">The end of the taskloop, exclusive.</param>
            <param name="action">The action to be executed as the body of the loop.</param>
            <param name="grainsize">The number of iterations to be completed per task.</param>
            <param name="num_tasks">The number of tasks to spawn to complete the loop.</param>
            <param name="only_if">Only generate tasks if true, otherwise execute loop sequentially.</param>
            <param name="depends">List of task dependencies for taskloop.</param>
            <returns>List of tasks generated by taskloop for use as future dependencies.</returns>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelMasterTaskloop(System.Int32,System.Int32,System.Action{System.Int32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Boolean)">
            <summary>
            Wrapper around Parallel.ParallelRegion(), Parallel.Master(), and Parallel.Taskloop().
            </summary>
            <param name="start">The start of the taskloop, inclusive.</param>
            <param name="end">The end of the taskloop, exclusive.</param>
            <param name="action">The action to be executed as the body of the loop.</param>
            <param name="grainsize">The number of iterations to be completed per task.</param>
            <param name="num_tasks">The number of tasks to spawn to complete the loop.</param>
            <param name="num_threads">The number of threads to be used in the parallel region, defaulting to null. If null, will be calculated on-the-fly.</param>
            <param name="only_if">Only generate tasks if true, otherwise execute loop sequentially.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelMaster(System.Action,System.Nullable{System.UInt32})">
            <summary>
            Wrapper around Parallel.ParallelRegion() and Parallel.Master().
            </summary>
            <param name="action">The action to be performed in the parallel region.</param>
            <param name="num_threads">The number of threads to be used in the parallel region, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.MasterTaskloop(System.Int32,System.Int32,System.Action{System.Int32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Boolean)">
            <summary>
            Wrapper around Parallel.Master() and Parallel.Taskloop().
            </summary>
            <param name="start">The start of the taskloop, inclusive.</param>
            <param name="end">The end of the taskloop, exclusive.</param>
            <param name="action">The action to be executed as the body of the loop.</param>
            <param name="grainsize">The number of iterations to be completed per task.</param>
            <param name="num_tasks">The number of tasks to spawn to complete the loop.</param>
            <param name="only_if">Only generate tasks if true, otherwise execute loop sequentially.</param>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.ParallelSections(System.Nullable{System.UInt32},System.Action[])">
            <summary>
            Creates a parallel sections region. Contains all of the parameters from ParallelRegion() and Sections().
            This is simply a convenience method for creating a parallel region and a sections region inside of it.
            </summary>
            <param name="actions">The actions to be performed in the parallel sections region.</param>
            <param name="num_threads">The number of threads to be used in the parallel sections region, defaulting to null. If null, will be calculated on-the-fly.</param>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedParallelismException">Thrown if ParallelRegion is called from within another ParallelRegion.</exception>
            <exception cref="T:DotMP.Exceptions.InvalidArgumentsException">Thrown if any provided arguments are invalid.</exception>
        </member>
        <member name="M:DotMP.Parallel.Critical(System.Int32,System.Action)">
            <summary>
            Creates a critical region.
            A critical region is a region of code that can only be executed by one thread at a time.
            If a thread encounters a critical region while another thread is inside a critical region, it will wait until the other thread is finished.
            </summary>
            <param name="id">The ID of the critical region. Must be unique per region but consistent across all threads.</param>
            <param name="action">The action to be performed in the critical region.</param>
            <returns>The ID of the critical region.</returns>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
        </member>
        <member name="M:DotMP.Parallel.Barrier">
            <summary>
            Creates a barrier.
            All threads must reach the barrier before any thread can continue.
            This is useful for synchronization. Many functions inside the Parallel class act as implicit barriers.
            Also acts as a memory barrier.
            </summary>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
        </member>
        <member name="M:DotMP.Parallel.GetNumProcs">
            <summary>
            Gets the number of available processors on the host system.
            </summary>
            <returns>The number of processors.</returns>
        </member>
        <member name="M:DotMP.Parallel.Master(System.Action)">
            <summary>
            Creates a master region.
            The master region is a region of code that is only executed by the master thread.
            The master thread is the thread with a thread ID of 0.
            You can get the thread ID of the calling thread with GetThreadNum().
            </summary>
            <param name="action">The action to be performed in the master region.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
        </member>
        <member name="M:DotMP.Parallel.Single(System.Int32,System.Action)">
            <summary>
            Creates a single region.
            A single region is only executed once per Parallel.ParallelRegion.
            The first thread to encounter the single region marks the region as encountered, then executes it.
            </summary>
            <param name="id">The ID of the single region. Must be unique per region but consistent across all threads.</param>
            <param name="action">The action to be performed in the single region.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
            <exception cref="T:DotMP.Exceptions.CannotPerformNestedWorksharingException">Thrown when nested inside another worksharing region.</exception>
        </member>
        <member name="M:DotMP.Parallel.Ordered(System.Int32,System.Action)">
            <summary>
            Creates an ordered region.
            An ordered region is a region of code that is executed in order inside of a For() or ForReduction&lt;T&gt;() loop.
            This also acts as an implicit Critical() region.
            </summary>
            <param name="id">The ID of the ordered region. Must be unique per region but consistent across all threads.</param>
            <param name="action">The action to be performed in the ordered region.</param>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
        </member>
        <member name="M:DotMP.Parallel.GetNumThreads">
            <summary>
            Gets the number of active threads.
            If not inside of a ParallelRegion(), returns 1.
            </summary>
            <returns>The number of threads.</returns>
        </member>
        <member name="M:DotMP.Parallel.GetThreadNum">
            <summary>
            Gets the ID of the calling thread.
            </summary>
            <returns>The number of the calling thread.</returns>
            <exception cref="T:DotMP.Exceptions.NotInParallelRegionException">Thrown when not in a parallel region.</exception>
        </member>
        <member name="M:DotMP.Parallel.SetNumThreads(System.Int32)">
            <summary>
            Sets the number of threads that will be used in the next parallel region.
            </summary>
            <param name="num_threads">The number of threads to be used in the next parallel region.</param>
        </member>
        <member name="M:DotMP.Parallel.GetMaxThreads">
            <summary>
            Gets the maximum number of threads that will be used in the next parallel region.
            </summary>
            <returns>The maximum number of threads that will be used in the next parallel region.</returns>
        </member>
        <member name="M:DotMP.Parallel.InParallel">
            <summary>
            Gets whether or not the calling thread is in a parallel region.
            </summary>
            <returns>Whether or not the calling thread is in a parallel region.</returns>
        </member>
        <member name="M:DotMP.Parallel.SetDynamic">
            <summary>
            Tells the runtime to dynamically adjust the number of threads.
            </summary>
        </member>
        <member name="M:DotMP.Parallel.GetDynamic">
            <summary>
            Gets whether or not the runtime is dynamically adjusting the number of threads.
            </summary>
            <returns>Whether or not the runtime is dynamically adjusting the number of threads.</returns>
        </member>
        <member name="M:DotMP.Parallel.SetNested(System.Boolean)">
            <summary>
            Enables nested parallelism.
            This function is not implemented, as nested parallelism does not exist in the current version of DotMP.
            There are no plans to implement nested parallelism at the moment.
            </summary>
            <param name="_">Unused.</param>
            <exception cref="T:System.NotImplementedException">Is always thrown.</exception>
        </member>
        <member name="M:DotMP.Parallel.GetNested">
            <summary>
            Gets whether or not nested parallelism is enabled.
            There are no plans to implement nested parallelism at the moment.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:DotMP.Parallel.GetWTime">
            <summary>
            Gets the wall time as a double, representing the number of seconds since the epoch.
            </summary>
            <returns>The wall time as a double.</returns>
        </member>
        <member name="M:DotMP.Parallel.GetSchedule">
            <summary>
            Returns the current schedule being used in a For() or ForReduction&lt;T&gt;() loop.
            </summary>
            <returns>The schedule being used in the For() or ForReduction&lt;T&gt;() loop, or null if a For() or ForReduction&lt;T&gt;() has not been encountered yet.</returns>
        </member>
        <member name="M:DotMP.Parallel.GetChunkSize">
            <summary>
            Returns the current chunk size being used in a For() or ForReduction&lt;T&gt;() loop.
            </summary>
            <returns>The chunk size being used in a For() or ForReduction&lt;T&gt;() loop. If 0, a For() or ForReduction&lt;T&gt;() has not been encountered yet.</returns>
        </member>
        <member name="T:DotMP.IScheduler">
            <summary>
            Interface for user-defined schedulers.
            </summary>
        </member>
        <member name="M:DotMP.IScheduler.LoopInit(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Called before each worksharing parallel-for loop.
            Used to instantiate scheduler variables.
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="num_threads">The number of threads.</param>
            <param name="chunk_size">Provided chunk size.</param>
        </member>
        <member name="M:DotMP.IScheduler.LoopNext(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Called between each chunk to calculate the bounds of the next chunk.
            </summary>
            <param name="thread_id">The thread ID to provide a chunk to.</param>
            <param name="start">The start of the chunk, inclusive.</param>
            <param name="end">The end of the chunk, exclusive.</param>
        </member>
        <member name="T:DotMP.Schedule">
            <summary>
            Represents the various scheduling strategies for parallel for loops.
            Detailed explanations of each scheduling strategy are provided alongside each getter.
            If no schedule is specified, the default is <see cref="P:DotMP.Schedule.Static"/>.
            </summary>
        </member>
        <member name="F:DotMP.Schedule.static_scheduler">
            <summary>
            Internal holder for StaticScheduler object.
            </summary>
        </member>
        <member name="F:DotMP.Schedule.dynamic_scheduler">
            <summary>
            Internal holder for the DynamicScheduler object.
            </summary>
        </member>
        <member name="F:DotMP.Schedule.guided_scheduler">
            <summary>
            Internal holder for the GuidedScheduler object.
            </summary>
        </member>
        <member name="F:DotMP.Schedule.runtime_scheduler">
            <summary>
            Internal holder for the RuntimeScheduler object.
            </summary>
        </member>
        <member name="F:DotMP.Schedule.workstealing_scheduler">
            <summary>
            Internal holder for the WorkStealingScheduler object.
            </summary>
        </member>
        <member name="P:DotMP.Schedule.Static">
            <summary>
            The static scheduling strategy.
            Iterations are divided amongst threads in round-robin fashion.
            Each thread gets a 'chunk' of iterations, determined by the chunk size.
            If no chunk size is specified, it's computed as total iterations divided by number of threads.
            
            Pros:
            - Reduced overhead.
            
            Cons:
            - Potential for load imbalance.
            
            Note: This is the default strategy if none is chosen.
            </summary>
        </member>
        <member name="P:DotMP.Schedule.Dynamic">
            <summary>
            The dynamic scheduling strategy.
            Iterations are managed in a central queue.
            Threads fetch chunks of iterations from this queue when they have no assigned work.
            If no chunk size is defined, a basic heuristic is used to determine a chunk size.
            
            Pros:
            - Better load balancing.
            
            Cons:
            - Increased overhead.
            </summary>
        </member>
        <member name="P:DotMP.Schedule.Guided">
            <summary>
            The guided scheduling strategy.
            Similar to dynamic, but the chunk size starts larger and shrinks as iterations are consumed.
            The shrinking formula is based on the remaining iterations divided by the number of threads.
            The chunk size parameter sets a minimum chunk size.
            
            Pros:
            - Adaptable to workloads.
            
            Cons:
            - Might not handle loops with early heavy load imbalance efficiently.
            </summary>
        </member>
        <member name="P:DotMP.Schedule.Runtime">
            <summary>
            Runtime-defined scheduling strategy.
            Schedule is determined by the 'OMP_SCHEDULE' environment variable.
            Expected format: "schedule[,chunk_size]", e.g., "static,128", "guided", or "dynamic,3".
            </summary>
        </member>
        <member name="P:DotMP.Schedule.WorkStealing">
            <summary>
            The work-stealing scheduling strategy.
            Each thread gets its own local queue of iterations to execute.
            If a thread's queue is empty, it randomly selects another thread's queue as its "victim" and steals half of its remaining iterations.
            The chunk size parameter specifies how many iterations a thread should execute from its local queue at a time.
            
            Pros:
            - Good approximation of optimal load balancing.
            - No contention over a shared queue.
            
            Cons:
            - Stealing can be an expensive operation.
            </summary>
        </member>
        <member name="M:DotMP.Schedule.LoopInit(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Abstract method for builtin schedulers to override for implementing IScheduler.
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="num_threads">The number of threads.</param>
            <param name="chunk_size">The chunk size.</param>
        </member>
        <member name="M:DotMP.Schedule.LoopNext(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Abstract method for builtin schedulers to override for implementing IScheduler.
            </summary>
            <param name="thread_id">The thread ID.</param>
            <param name="start">The start of the chunk, inclusive.</param>
            <param name="end">The end of the chunk, exclusive.</param>
        </member>
        <member name="T:DotMP.Schedulers.StaticScheduler">
            <summary>
            Implementation of static scheduling.
            </summary>
        </member>
        <member name="T:DotMP.Schedulers.StaticScheduler.IterWrapper">
            <summary>
            Struct to ensure that the curr_iter variables cannot reside on the same cache line.
            Avoids false sharing bottlenecks.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.StaticScheduler.IterWrapper.curr_iter">
            <summary>
            A thread's current iteration.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.StaticScheduler.chunk_size">
            <summary>
            The chunk size.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.StaticScheduler.end">
            <summary>
            End of the loop, exclusive.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.StaticScheduler.curr_iters">
            <summary>
            Bookkeeping to check which iteration each thread is on.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.StaticScheduler.advance_by">
            <summary>
            How much to advance by after each chunk.
            </summary>
        </member>
        <member name="M:DotMP.Schedulers.StaticScheduler.LoopInit(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Override method for LoopInit, is called when first starting a static loop.
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="num_threads">The number of threads.</param>
            <param name="chunk_size">The chunk size.</param>
            <exception cref="T:System.OverflowException">Thrown if there's an internal scheduler overflow.</exception> 
        </member>
        <member name="M:DotMP.Schedulers.StaticScheduler.LoopNext(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Override method for LoopNext, is called to get the bounds of the next chunk to execute.
            </summary>
            <param name="thread_id">The thread ID.</param>
            <param name="start">The start of the chunk, inclusive.</param>
            <param name="end">The end of the chunk, exclusive.</param>
            <exception cref="T:System.OverflowException">Thrown if there's an internal scheduler overflow.</exception> 
        </member>
        <member name="T:DotMP.Schedulers.DynamicScheduler">
            <summary>
            Implementation of dynamic scheduling.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.DynamicScheduler.chunk_size">
            <summary>
            The chunk size.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.DynamicScheduler.start">
            <summary>
            Start of the loop, inclusive.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.DynamicScheduler.end">
            <summary>
            End of the loop, exclusive.
            </summary>
        </member>
        <member name="M:DotMP.Schedulers.DynamicScheduler.LoopInit(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Override method for LoopInit, is called when first starting a dynamic loop.
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="num_threads">The number of threads.</param>
            <param name="chunk_size">The chunk size.</param>
        </member>
        <member name="M:DotMP.Schedulers.DynamicScheduler.LoopNext(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Override method for LoopNext, is called to get the bounds of the next chunk to execute.
            </summary>
            <param name="thread_id">The thread ID.</param>
            <param name="start">The start of the chunk, inclusive.</param>
            <param name="end">The end of the chunk, exclusive.</param>
            <exception cref="T:System.OverflowException">Thrown if there's an internal scheduler overflow.</exception> 
        </member>
        <member name="T:DotMP.Schedulers.GuidedScheduler">
            <summary>
            Implementation of guided scheduling.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.GuidedScheduler.chunk_size">
            <summary>
            The chunk size.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.GuidedScheduler.num_threads">
            <summary>
            Number of threads.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.GuidedScheduler.start">
            <summary>
            Start of the loop, inclusive.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.GuidedScheduler.end">
            <summary>
            End of the loop, exclusive.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.GuidedScheduler.sched_lock">
            <summary>
            Lock for scheduling purposes.
            </summary>
        </member>
        <member name="M:DotMP.Schedulers.GuidedScheduler.LoopInit(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Override method for LoopInit, is called when first starting a guided loop.
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="num_threads">The number of threads.</param>
            <param name="chunk_size">The chunk size.</param>
        </member>
        <member name="M:DotMP.Schedulers.GuidedScheduler.LoopNext(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Override method for LoopNext, is called to get the bounds of the next chunk to execute.
            </summary>
            <param name="thread_id">The thread ID.</param>
            <param name="start">The start of the chunk, inclusive.</param>
            <param name="end">The end of the chunk, exclusive.</param>
            <exception cref="T:System.OverflowException">Thrown if there's an internal scheduler overflow.</exception> 
        </member>
        <member name="T:DotMP.Schedulers.RuntimeScheduler">
            <summary>
            Placeholder for the runtime scheduler.
            Is not meant to be called directly. The Parallel.FixArgs method should detect its existence and swap it out for another scheduler with implementations.
            </summary>
        </member>
        <member name="M:DotMP.Schedulers.RuntimeScheduler.LoopInit(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Should not be called.
            </summary>
            <param name="start">Unused.</param>
            <param name="end">Unused.</param>
            <param name="num_threads">Unused.</param>
            <param name="chunk_size">Unused.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="M:DotMP.Schedulers.RuntimeScheduler.LoopNext(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Should not be called.
            </summary>
            <param name="thread_id">Unused.</param>
            <param name="start">Unused.</param>
            <param name="end">Unused.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="T:DotMP.Schedulers.WorkStealingScheduler">
            <summary>
            Implementation of work-stealing scheduling.
            </summary>
        </member>
        <member name="T:DotMP.Schedulers.WorkStealingScheduler.Queue">
            <summary>
            Queue struct, ensuring that no two values share a cache line.
            This avoids false sharing issues.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.WorkStealingScheduler.Queue.start">
            <summary>
            Start of the queue.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.WorkStealingScheduler.Queue.end">
            <summary>
            End of the queue.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.WorkStealingScheduler.Queue.work_remaining">
            <summary>
            Whether or not there is work remaining in the queue.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.WorkStealingScheduler.Queue.qlock">
            <summary>
            Lock for this queue.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.WorkStealingScheduler.queues">
            <summary>
            Each thread's queue.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.WorkStealingScheduler.chunk_size">
            <summary>
            Chunk size to use.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.WorkStealingScheduler.num_threads">
            <summary>
            Number of threads.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.WorkStealingScheduler.threads_with_remaining_work">
            <summary>
            Counts the remaining threads with work so threads know when to stop attempting to steal.
            </summary>
        </member>
        <member name="F:DotMP.Schedulers.WorkStealingScheduler.localRandom">
            <summary>
            Random instance for compatibility with non-.NET 6 compiles.
            </summary>
        </member>
        <member name="M:DotMP.Schedulers.WorkStealingScheduler.LoopInit(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Override method for LoopInit, is called when first starting a work-stealing loop.
            </summary>
            <param name="start">The start of the loop, inclusive.</param>
            <param name="end">The end of the loop, exclusive.</param>
            <param name="num_threads">The number of threads.</param>
            <param name="chunk_size">The chunk size.</param>
            <exception cref="T:System.OverflowException">Thrown if there's an internal scheduler overflow.</exception> 
        </member>
        <member name="M:DotMP.Schedulers.WorkStealingScheduler.LoopNext(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Override method for LoopNext, is called to get the bounds of the next chunk to execute.
            </summary>
            <param name="thread_id">The thread ID.</param>
            <param name="start">The start of the chunk, inclusive.</param>
            <param name="end">The end of the chunk, exclusive.</param>
            <exception cref="T:System.OverflowException">Thrown if there's an internal scheduler overflow.</exception> 
        </member>
        <member name="M:DotMP.Schedulers.WorkStealingScheduler.StealHandler(System.Int32)">
            <summary>
            Handles whether or not to steal and how to process the results from a steal.
            </summary>
            <param name="thread_id">The thread ID.</param>
        </member>
        <member name="M:DotMP.Schedulers.WorkStealingScheduler.DoSteal(System.Int32)">
            <summary>
            Perform a steal.
            </summary>
            <param name="thread_id">The thread ID.</param>
            <returns>Whether or not the steal was successful.</returns>
            <exception cref="T:System.OverflowException">Thrown if there's an internal scheduler overflow.</exception> 
        </member>
        <member name="T:DotMP.SectionsContainer">
            <summary>
            Static class that contains necessary information for sections.
            Sections allow for the user to submit multiple actions to be executed in parallel.
            A sections region contains a collection of actions to be executed, specified as Parallel.Section directives.
            More information can be found in the Parallel.Sections documentation.
            </summary>
        </member>
        <member name="F:DotMP.SectionsContainer.actions_pv">
            <summary>
            The actions submitted by the individual `section` directives.
            </summary>
        </member>
        <member name="M:DotMP.SectionsContainer.GetNextItem(System.Boolean@)">
            <summary>
            Gets the next item from the actions bag.
            </summary>
            <param name="successful">Whether or not fetching from the bag was successful.</param>
            <returns>The action pulled from the bag, if successful. If unsuccessful, undefined.</returns>
        </member>
        <member name="M:DotMP.SectionsContainer.#ctor(System.Collections.Generic.IEnumerable{System.Action})">
            <summary>
            Constructor which takes a list of actions and ensures the master thread assigns to SectionsContainer.actions_pv.
            </summary>
            <param name="actions">The actions that the Parallel.Sections region will perform.</param>
        </member>
        <member name="T:DotMP.Shared`1">
            <summary>
            A shared variable that can be used in a parallel region.
            This allows for a variable to be declared inside of a parallel region that is shared among all threads, which has some nice use cases.
            </summary>
            <typeparam name="T">The type of the shared variable.</typeparam>
        </member>
        <member name="F:DotMP.Shared`1.shared">
            <summary>
            The shared variables.
            </summary>
        </member>
        <member name="F:DotMP.Shared`1.name">
            <summary>
            The name of the shared variable.
            </summary>
        </member>
        <member name="P:DotMP.Shared`1.Disposed">
            <summary>
            Whether or not the shared variable has been disposed.
            </summary>
        </member>
        <member name="M:DotMP.Shared`1.#ctor(System.String,`0)">
            <summary>
            Creates a new shared variable with the given name and value.
            Must be called from all threads in the parallel region.
            Acts as a barrier.
            </summary>
            <param name="name">Name of the shared variable.</param>
            <param name="value">Initial starting value of the shared variable.</param>
        </member>
        <member name="M:DotMP.Shared`1.Dispose">
            <summary>
            Clears the shared variable from memory.
            Must be called from all threads in the parallel region.
            Acts as a barrier.
            </summary>
        </member>
        <member name="M:DotMP.Shared`1.Dispose(System.Boolean)">
            <summary>
            Clears the shared variable from memory.
            Virtual implementation for IDisposable interface.
            </summary>
            <param name="disposing">Whether or not to dispose of the shared variable.</param>
        </member>
        <member name="M:DotMP.Shared`1.op_Implicit(DotMP.Shared{`0})~`0">
            <summary>
            Gets the value of the shared variable.
            </summary>
            <param name="shared">The shared variable to get the value from.</param>
        </member>
        <member name="M:DotMP.Shared`1.Set(`0)">
            <summary>
            Sets the value of the shared variable.
            Is not thread-safe, so user must ensure thread safety.
            </summary>
            <param name="value">The new value of the shared variable.</param>
        </member>
        <member name="M:DotMP.Shared`1.Get">
            <summary>
            Gets the value of the shared variable.
            </summary>
            <returns>The value of the shared variable.</returns>
        </member>
        <member name="T:DotMP.Shared">
            <summary>
            Factory class for Shared&lt;T&gt;
            </summary>
        </member>
        <member name="M:DotMP.Shared.Create``1(System.String,``0)">
            <summary>
            Factory method for creating shared variables.
            </summary>
            <typeparam name="T">The type of the shared variable to create.</typeparam>
            <param name="name">The name of the shared variable.</param>
            <param name="value">The value of the shared variable.</param>
            <returns>A Shared object.</returns>
        </member>
        <member name="T:DotMP.SharedEnumerable`2">
            <summary>
            A specialization of Shared for items that can be indexed with square brackets.
            The DotMP-parallelized Conjugate Gradient example shows this off fairly well inside of the SpMV function.
            </summary>
            <typeparam name="T">The type that the IList is containing.</typeparam>
            <typeparam name="U">The full IList type.</typeparam>
        </member>
        <member name="M:DotMP.SharedEnumerable`2.#ctor(System.String,`1)">
            <summary>
            Constructs a new shared variable with the given name and value.
            </summary>
            <param name="name">The name of the shared variable.</param>
            <param name="value">The value of the shared variable.</param>
        </member>
        <member name="P:DotMP.SharedEnumerable`2.Item(System.Int32)">
            <summary>
            Allows for indexing into the shared variable with square brackets.
            </summary>
            <param name="index">The index to fetch.</param>
            <returns>The value at that index.</returns>
        </member>
        <member name="M:DotMP.SharedEnumerable`2.op_Implicit(DotMP.SharedEnumerable{`0,`1})~`1">
            <summary>
            Allows for implicit conversion to an array.
            </summary>
            <param name="shared">A SharedEnumerable object.</param>
        </member>
        <member name="M:DotMP.SharedEnumerable`2.Dispose">
            <summary>
            Clears the shared variable from memory.
            Must be called from all threads in the parallel region.
            Acts as a barrier.
            </summary>
        </member>
        <member name="M:DotMP.SharedEnumerable`2.Get">
            <summary>
            Gets the value of the shared variable as an IList&lt;T&gt;.
            </summary>
            <returns>The value of the shared variable as an IList&lt;T&gt;.</returns>
        </member>
        <member name="T:DotMP.SharedEnumerable">
            <summary>
            The factory class for SharedEnumerable&lt;T, U&gt;
            </summary>
        </member>
        <member name="M:DotMP.SharedEnumerable.Create``1(System.String,``0[])">
            <summary>
            Factory method for creating shared arrays.
            </summary>
            <typeparam name="T">The type the array contains.</typeparam>
            <param name="name">The name of the shared enumerable.</param>
            <param name="value">Initial starting value of the shared enumerable.</param>
            <returns>A SharedEnumerable object.</returns>
        </member>
        <member name="M:DotMP.SharedEnumerable.Create``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            Factory method for creating shared Lists.
            </summary>
            <typeparam name="T">The type the array contains.</typeparam>
            <param name="name">The name of the shared enumerable.</param>
            <param name="value">Initial starting value of the shared enumerable.</param>
            <returns>A SharedEnumerable object.</returns>
        </member>
        <member name="T:DotMP.TaskingContainer">
            <summary>
            A simple container for a Queue&lt;Action&gt; for managing tasks.
            Will grow in complexity as dependencies are added and a dependency graph must be generated.
            </summary>
        </member>
        <member name="F:DotMP.TaskingContainer.dag">
            <summary>
            DAG of tasks that must execute.
            We use a DAG in order to maintain dependency chains.
            </summary>
        </member>
        <member name="M:DotMP.TaskingContainer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DotMP.TaskingContainer.ResetDAG">
            <summary>
            Resets the DAG to a default state.
            Allows the garbage collector to collect unused data.
            </summary>
        </member>
        <member name="M:DotMP.TaskingContainer.ResetDAGNotThreadSafe">
            <summary>
            Resets the DAG to a default state.
            Allows the garbage collector to collect unused data.
            Unlike ResetDAG(), this version is not thread-safe!
            </summary>
        </member>
        <member name="M:DotMP.TaskingContainer.GetNextTask(System.Action@,System.UInt64@,System.Int32@)">
            <summary>
            Gets the next task from the queue.
            </summary>
            <param name="action">The body of the task to be executed.</param>
            <param name="uuid">The UUID of the task to be executed.</param>
            <param name="tasks_remaining">The number of tasks remaining in the queue.</param>
            <returns>Whether or not the action was successful.</returns>
        </member>
        <member name="M:DotMP.TaskingContainer.EnqueueTask(System.Action,DotMP.TaskUUID[])">
            <summary>
            Enqueues a task to the queue.
            </summary>
            <param name="action">The task to enqueue.</param>
            <param name="depends">List of task dependencies.</param>
            <returns>Task generated from the enqueue task action.</returns>
        </member>
        <member name="M:DotMP.TaskingContainer.EnqueueTaskloopTask(System.Int32,System.Int32,System.Action{System.Int32},DotMP.TaskUUID[])">
            <summary>
            Enqueues a taskloop task to the task queue.
            </summary>
            <param name="start">The start of the current taskloop task, inclusive.</param>
            <param name="end">The end of the current taskloop task, exclusive.</param>
            <param name="action">The action to be executed.</param>
            <param name="depends">List of task dependencies.</param>
            <returns>Task generated from this iteration of the taskloop.</returns>
        </member>
        <member name="M:DotMP.TaskingContainer.CompleteTask(System.UInt64)">
            <summary>
            Mark task as completed to remove as a dependency in the DAG.
            </summary>
            <param name="uuid">UUID of task to remove as a dependency.</param>
        </member>
        <member name="M:DotMP.TaskingContainer.TaskIsComplete(System.UInt64)">
            <summary>
            Determines if a task has been completed.
            </summary>
            <param name="uuid">The ID of the task to check completion.</param>
            <returns>Whether or not the task has been completed.</returns>
        </member>
        <member name="T:DotMP.TaskUUID">
            <summary>
            Task UUID as returned from Parallel.Task.
            </summary>
        </member>
        <member name="F:DotMP.TaskUUID.next_uuid">
            <summary>
            Global counter for next UUID to be generated.
            </summary>
        </member>
        <member name="F:DotMP.TaskUUID.uuid">
            <summary>
            This task's UUID.
            </summary>
        </member>
        <member name="M:DotMP.TaskUUID.#ctor">
            <summary>
            Default constructor.
            Initializes this task's UUID to the next valid UUID.
            </summary>
        </member>
        <member name="M:DotMP.TaskUUID.GetUUID">
            <summary>
            Gets this task's UUID.
            </summary>
            <returns>This task's UUID.</returns>
        </member>
        <member name="T:DotMP.WorkShare">
            <summary>
            Contains all relevant information about a parallel for loop.
            Contains a collection of Thr objects, the loop's start and end iterations, the chunk size, the number of threads, and the number of threads that have completed their work.
            </summary>
        </member>
        <member name="F:DotMP.WorkShare.threads">
            <summary>
            The threads to be used in the parallel for loop.
            </summary>
        </member>
        <member name="F:DotMP.WorkShare.working_iters">
            <summary>
            The working iterations of each thread.
            </summary>
        </member>
        <member name="P:DotMP.WorkShare.working_iter">
            <summary>
            Get Thr object based on current thread ID.
            </summary>
        </member>
        <member name="F:DotMP.WorkShare.start_pv">
            <summary>
            The starting iteration of the parallel for loop, inclusive.
            </summary>
        </member>
        <member name="P:DotMP.WorkShare.start">
            <summary>
            Getter and setter for the singleton integer WorkShare.start_pv.
            </summary>
        </member>
        <member name="P:DotMP.WorkShare.end">
            <summary>
            The ending iteration of the parallel for loop, exclusive.
            </summary>
        </member>
        <member name="F:DotMP.WorkShare.chunk_size_pv">
            <summary>
            The chunk size to be used with the selected scheduler.
            </summary>
        </member>
        <member name="P:DotMP.WorkShare.chunk_size">
            <summary>
            Getter and setter for singleton uint WorkShare.chunk_size_pv.
            </summary>
        </member>
        <member name="P:DotMP.WorkShare.num_threads">
            <summary>
            The number of threads to be used in the parallel for loop.
            </summary>
        </member>
        <member name="P:DotMP.WorkShare.op">
            <summary>
            The operation to be performed if doing a reduction.
            </summary>
        </member>
        <member name="F:DotMP.WorkShare.reduction_list">
            <summary>
            The list of reduction variables from each thread.
            </summary>
        </member>
        <member name="P:DotMP.WorkShare.reduction_values">
            <summary>
            Getter for WorkShare.reduction_list.
            </summary>
        </member>
        <member name="F:DotMP.WorkShare.schedule_pv">
            <summary>
            The schedule to be used in the parallel for loop.
            </summary>
        </member>
        <member name="P:DotMP.WorkShare.schedule">
            <summary>
            Getter and setter for singleton object WorkShare.schedule_pv.
            </summary>
        </member>
        <member name="F:DotMP.WorkShare.in_for_pv">
            <summary>
            Booleans per-thread to check if we're currently in a Parallel.For or Parallel.ForReduction&lt;T&gt;.
            </summary>
        </member>
        <member name="P:DotMP.WorkShare.in_for">
            <summary>
            Getter and setter for this thread's value in WorkShare.in_for_pv.
            </summary>
        </member>
        <member name="M:DotMP.WorkShare.#ctor(System.UInt32,System.Threading.Thread[],System.Int32,System.Int32,System.UInt32,System.Nullable{DotMP.Operations},DotMP.IScheduler)">
            <summary>
            The constructor for a WorkShare object.
            </summary>
            <param name="num_threads">The number of threads in the WorkShare.</param>
            <param name="threads">The Thread[] array of threads.</param>
            <param name="start">Starting iteration, inclusive.</param>
            <param name="end">Ending iteration, exclusive.</param>
            <param name="chunk_size">The chunk size to use.</param>
            <param name="op">The operation for reduction, null if not a reduction.</param>
            <param name="schedule">The Parallel.Schedule to use.</param>
        </member>
        <member name="M:DotMP.WorkShare.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DotMP.WorkShare.AddReductionValue(System.Object)">
            <summary>
            Add a value to reduction_list.
            </summary>
            <param name="value">The value to add to reduction_list.</param>
        </member>
        <member name="M:DotMP.WorkShare.SetLocal``1(``0@)">
            <summary>
            Sets the local variable to the appropriate value based on the operation for parallel for reduction loops.
            For addition and subtraction, the initial starting value is 0.
            For multiplication, the initial starting value is 1.
            For binary And, the initial starting value is the bitwise negation of 0.
            For binary Or and Xor, the initial starting value is 0.
            For boolean And, the initial starting value is true.
            For boolean Or, the initial starting value is false.
            For min, the initial starting value is int.MaxValue.
            For max, the initial starting value is int.MinValue.
            </summary>
            <typeparam name="T">The type of the local variable.</typeparam>
            <param name="local">The local variable to be set.</param>
        </member>
        <member name="M:DotMP.WorkShare.PerformLoop``1(DotMP.ForAction{``0})">
            <summary>
            Performs a parallel for loop according to the scheduling policy provided.
            </summary>
            <typeparam name="T">The type of reductions, if applicable.</typeparam>
            <param name="forAction">The function to be executed.</param>
            <exception cref="T:DotMP.Exceptions.InternalSchedulerException">Thrown if the internal schedulers throw an exception.</exception> 
        </member>
    </members>
</doc>
